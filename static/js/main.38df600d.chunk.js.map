{"version":3,"sources":["reducers/bookReducer.js","contexts/BookContext.js","components/AppHeader.js","components/BookItem.js","components/BookList.js","components/BookForm.js","App.js","serviceWorker.js","index.js"],"names":["newBook","title","author","valarg","type","String","required","id","uuid","bookReducer","state","action","book","filter","BookContext","createContext","BookContextProvider","props","useReducer","data","localStorage","getItem","JSON","parse","books","dispatch","useEffect","stringify","setItem","Provider","value","children","AppHeader","useContext","className","length","BookItem","dispatchBookAction","onClick","BookList","map","key","BookForm","useState","setTitle","setAuthor","titleInputEl","useRef","onSubmit","event","preventDefault","current","focus","placeholder","ref","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.38df600d.chunk.js","sourcesContent":["import { v4 as uuid } from 'uuid';\nimport valarg from 'valarg';\n\nexport const newBook = (title, author) => {\n  valarg(title, { type: String, required: true })\n  valarg(author, { type: String })\n\n  return {\n    id: uuid(),\n    title,\n    author,\n  }\n}\n\nconst bookReducer = (state = [], action) => {\n  switch (action.type) {\n\n    case 'ADD_BOOK':\n      return [...state, newBook(action.book.title, action.book.author)];\n\n    case 'REMOVE_BOOK':\n      return state.filter(book => book.id !== action.book.id);\n\n    default:\n      return state;\n  }\n}\n\nexport default bookReducer;\n","import React, { createContext, useReducer, useEffect } from 'react';\nimport bookReducer from '../reducers/bookReducer';\n\nexport const BookContext = createContext();\n\nconst BookContextProvider = (props) => {\n  const [books, dispatch] = useReducer(bookReducer, [], () => {\n    const data = localStorage.getItem('books')\n    return data ? JSON.parse(data) : []\n  })\n\n  useEffect(() => {\n    const data = JSON.stringify(books)\n    localStorage.setItem('books', data)\n  }, [books])\n\n  return (\n    <BookContext.Provider value={{ books, dispatch }}>\n      {props.children}\n    </BookContext.Provider>\n  )\n}\n\nexport default BookContextProvider;","import React, { useContext } from 'react';\nimport './AppHeader.css';\nimport { BookContext } from '../contexts/BookContext';\n\nconst AppHeader = () => {\n  const { books } = useContext(BookContext)\n\n  return (\n    <div className=\"AppHeader\">\n      <h2>Reading list</h2>\n      <p>Books to read: {books.length}</p>\n    </div>\n  );\n}\n \nexport default AppHeader;","import React, { useContext } from 'react';\nimport './BookItem.css';\nimport { BookContext } from '../contexts/BookContext';\n\nconst BookItem = ({ book }) => {\n  const { dispatch: dispatchBookAction } = useContext(BookContext)\n\n  return (\n    <span className=\"BookItem\" onClick={() => dispatchBookAction({ type: 'REMOVE_BOOK', book: { id: book.id }})}>\n      <span className=\"book-title\">{book.title}</span>\n      {book.author && <span className=\"by-author\"> by <span className=\"book-author\">{book.author}</span></span>}\n    </span>\n  );\n}\n \nexport default BookItem;","import React, { useContext } from 'react';\nimport './BookList.css';\nimport { BookContext } from '../contexts/BookContext';\nimport BookItem from './BookItem';\n\nconst BookList = () => {\n  const { books } = useContext(BookContext)\n  \n  if (!books.length) {\n    return (\n      <div className=\"BookList\">\n        <p>Nothing to read</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"BookList\">\n      <ul>\n        {books.map(book => {\n          return (\n            <li key={book.id}>\n              <BookItem book={book} />\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n \nexport default BookList;","import React, { useContext, useState, useRef } from 'react';\nimport './BookForm.css';\nimport { BookContext } from '../contexts/BookContext';\n\nconst BookForm = () => {\n  const { dispatch: dispatchBookAction } = useContext(BookContext)\n\n  const [title, setTitle] = useState('')\n  const [author, setAuthor] = useState('')\n        \n  const titleInputEl = useRef(null)\n\n  const addBookOnSubmit = (event) => {\n    event.preventDefault()\n\n    if (!title) {\n      return;\n    }\n\n    dispatchBookAction({ type: 'ADD_BOOK', book: { title, author } })\n    setTitle('')\n    setAuthor('')\n    titleInputEl.current.focus()\n  }\n\n  return (\n    <form className=\"BookForm\" onSubmit={addBookOnSubmit}>\n      <label className=\"form-item\">\n        <input type=\"text\" placeholder=\"Title\" ref={titleInputEl} value={title} onChange={(event) => setTitle(event.target.value)} />\n      </label>\n\n      <label className=\"form-item\">\n        <input type=\"text\" placeholder='Author' value={author} onChange={(event) => setAuthor(event.target.value)} />\n      </label>\n\n      <div className=\"form-item\">\n        <button>Add book</button>\n      </div>\n    </form>\n  );\n}\n \nexport default BookForm;","import React from 'react';\nimport './App.css';\nimport BookContextProvider from './contexts/BookContext';\nimport AppHeader from './components/AppHeader';\nimport BookList from './components/BookList';\nimport BookForm from './components/BookForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <AppHeader />\n        <BookList />\n        <BookForm />\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}